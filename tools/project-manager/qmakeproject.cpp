#include "qmakeproject.h"

#include <QFile>
#include <QRegExp>
#include <QDebug>

QMakeProject::QMakeProject( QObject *parent, QString fileName )
	: AbstractProject(parent,fileName)
{
	loadProject(fileName);
}

QMakeProject::QMakeProject( QString fileName, QObject *parent )
	: AbstractProject(parent,fileName)
{
	loadProject(fileName);
}

bool QMakeProject::newProject( QString newProjectName )
{
	m_projectName = newProjectName;
	// TODO remove files, subprojects, properties etc
	return true;
}

bool QMakeProject::loadProject( QString newFileName )
{
	if (newFileName.isEmpty())
		return true;
	
	// based on code from http://doc.trolltech.com/qq/qq01-seriously-weird-qregexp.html
	QFile in( newFileName );
	if ( !in.open(QIODevice::ReadOnly))
		return false;
	QString text = in.readAll();
	in.close();
	clearData();
	
	text.replace( QRegExp("#[^\n]*"), "" );
	text.replace( QRegExp("\\\\\\s*\n"), " " );
	text.replace( QRegExp("\\s*\n\\s*"), "<END>" );
	
#if 1
	text.replace( QRegExp("="), " = " );
	text.replace( QRegExp("\\+ ="), " += " );
	text.replace( QRegExp("\\- ="), " -= " );
#else
//  	text.replace( QRegExp("(?<![+-])="), " = " );
 	text.replace( QRegExp("[^+-]="), " = " );
	text.replace( QRegExp("+="), " += " );
	text.replace( QRegExp("-="), " -= " );
#endif
	text = text.simplified();
	
	QStringList lines = text.split("<END>");
	foreach( QString line, lines)
	{
		QStringList tokens = line.split(" ");
		if ( tokens.count() < 2)
			continue;
		if (tokens[1] == "=")
			setTokens( tokens );
		else if (tokens[1] == "+=")
			appendTokens( tokens );
		else if (tokens[1] == "-=")
			removeTokens( tokens );
	}
	
	// now we have the file loaded as meta-data, propagate this 
	// to the AbstractProject data
	QStringList list;
	list << "SOURCES" << "HEADERS" << "TRANSLATIONS" << "FORMS" 
		<< "RESOURCES" << "DEFINES";
	
	foreach( QString s, list)
	{
		addFiles( m_data[s], s );
	}
	
	if (m_data["TARGET"].count()>=1)
		setTargetName(m_data["TARGET"].at(0));
	setProjectName(newFileName);
	return true;
}

bool QMakeProject::saveProject( QString newFileName )
{
	if (newFileName.isEmpty())
		return true;
		
	QFile file( newFileName );
	if ( !file.open(QIODevice::WriteOnly | QIODevice::Text))
		return false;
	
	QTextStream out(&file);
	out << "# file generated by qmakeproject" << "\n\n";
	out << "TARGET = " << getTargetName() << "\n";
	
	QHash<QString,QStringList>::const_iterator i = m_data.constBegin();
	while (i != m_data.constEnd()) 
	{
		out << i.key() << " = ";
		for(int j=0; j<i.value().count();j++)
		{
			out << i.value()[j] << " ";
		}
		out << "\n";
		++i;
	}
	
	file.close();
}

bool QMakeProject::isLoaded()
{
	return true;
}

void QMakeProject::clearData()
{
/*	QHash<QString,QStringList>::const_iterator i = m_data.constBegin();
	while (i != m_files.constEnd()) 
	{
		qDebug() << i.key() << m_data[i.key()];
		m_data[i.key()].clear();
		qDebug() << i.key() << m_data[i.key()];
		++i;
	}*/
	m_data.clear();
	clear();
}

void QMakeProject::setTokens(QStringList tokens)
{
	QString category = tokens[0];
	m_data[category].clear();
	
	for(int i=2; i<tokens.count();i++)
	{
		m_data[category] << tokens[i];
	}
}

void QMakeProject::appendTokens(QStringList tokens)
{
	QString category = tokens[0];
	
	for(int i=2; i<tokens.count();i++)
	{
		m_data[category] << tokens[i];
	}
}

void QMakeProject::removeTokens(QStringList tokens)
{
	QString category = tokens[0];
	
	for(int i=2; i<tokens.count();i++)
	{
		m_data[category].removeAll(tokens[i]);
	}
}

// kate: space-indent off; tab-indent on; tab-width 8; indent-width 8;
// kate: show-tabs on; auto-brackets on; end-of-line: unix
// kate: syntax: c++; indent-mode cstyle;auto-insert-doxygen: on;
